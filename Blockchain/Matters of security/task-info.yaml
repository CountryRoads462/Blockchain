type: edu
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                        "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                        "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                        "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |
    package blockchain;

    import java.security.MessageDigest;

    public class StringUtil {

        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");

                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/Miners.java
  visible: true
  text: |+
    package blockchain;

    import java.time.LocalTime;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.concurrent.Callable;
    import java.util.concurrent.ExecutionException;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    public class Miners {

        public static ResultOfMining mine(int numberOfZeros) {
            ExecutorService executor = Executors.newFixedThreadPool(10);
            List<Callable<ResultOfMining>> callables = new ArrayList<>();
            for (int i = 0; i < 10; i++) {
                callables.add(() -> {
                    Random random = new Random();
                    int randomMagicNumber = random.nextInt(1000000000);

                    class Checker {

                        boolean isCorrectNumberOfZeros(int arg, String hash) {
                            if (hash.length() < arg) {
                                return false;
                            }
                            for (int i = 0; i < arg; i++) {
                                if (hash.charAt(i) != '0') {
                                    return false;
                                }
                            }
                            return true;
                        }
                    }
                    Checker checker = new Checker();

                    LocalTime startTime = LocalTime.now();
                    String hash;
                    while (true) {
                        hash = StringUtil.applySha256(String.valueOf(randomMagicNumber));
                        if (checker.isCorrectNumberOfZeros(numberOfZeros, hash)) {
                            break;
                        }

                        randomMagicNumber = random.nextInt(1000000000);
                    }

                    LocalTime endTime = LocalTime.now();

                    String minerName = Thread.currentThread().getName().replaceAll("pool-\\d-thread-", "");

                    return new ResultOfMining(minerName, hash, randomMagicNumber, endTime.toSecondOfDay() - startTime.toSecondOfDay());
                });
            }
            try {
                return executor.invokeAny(callables);
            } catch (InterruptedException | ExecutionException ignored) {}

            return null;
        }
    }


    class ResultOfMining {

        private final String nameOfMiner;
        private final String hash;
        private final long magicNumber;
        private final int generationTime;

        public ResultOfMining(String nameOfMiner, String hash, long magicNumber, int generationTime) {
            this.nameOfMiner = nameOfMiner;
            this.hash = hash;
            this.magicNumber = magicNumber;
            this.generationTime = generationTime;
        }

        public String getNameOfMiner() {
            return nameOfMiner;
        }

        public String getHash() {
            return hash;
        }

        public long getMagicNumber() {
            return magicNumber;
        }

        public int getGenerationTime() {
            return generationTime;
        }
    }

  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;

    public class BlockChain {

        private static int numberOfZeros = 0;

        private static List<String> messages = new ArrayList<>();

        private final List<Block> blockChain = new ArrayList<>();

        public void generateNewBlock() {
            int id = blockChain.size() + 1;

            String prevHash;
            if (id == 1) {
                prevHash = "0";
            } else {
                prevHash = blockChain.get(blockChain.size() - 1).getHash();
            }

            Random random = new Random();
            String message = "";
            int oldNumber = numberOfZeros;
            boolean flag = true;
            while (flag) {
                int randomNumber = random.nextInt(3);
                switch (randomNumber) {
                    case 1: {
                        numberOfZeros = numberOfZeros + 1;
                        flag = false;
                        message = String.format("N was increased to %d", numberOfZeros);
                        break;
                    }
                    case 2: {
                        if (numberOfZeros - 1 >= 0) {
                            numberOfZeros = numberOfZeros - 1;
                            flag = false;
                            message = "N was decreased by 1";
                        }
                        break;
                    }
                    default: {
                        flag = false;
                        message = "N stays the same";
                        break;
                    }
                }
            }

            ResultOfMining resultOfMining = Miners.mine(oldNumber);

            assert resultOfMining != null;
            String nameOfMiner = resultOfMining.getNameOfMiner();
            long magicNumber = resultOfMining.getMagicNumber();
            String hash = resultOfMining.getHash();
            int generationTime = resultOfMining.getGenerationTime();

            Block newBlock = new Block(nameOfMiner, id, magicNumber, prevHash, hash, messages, generationTime, message);
            messages.clear();
            blockChain.add(newBlock);

            System.out.println(newBlock + "\n");
        }

        public static void receiveMessage(String msg) {
            messages.add(msg);
        }

        public int getSize() {
            return blockChain.size();
        }
    }
  learner_created: true
- name: src/blockchain/Sender.java
  visible: true
  text: |
    package blockchain;

    import java.util.Random;
    import java.util.concurrent.Executors;
    import java.util.concurrent.ScheduledExecutorService;
    import java.util.concurrent.TimeUnit;

    public class Sender {

        private static final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();

        public static void startSending() {
            executor.scheduleAtFixedRate(() -> {
                   Random random = new Random();
                   int randomMessage = random.nextInt(50);
                   BlockChain.receiveMessage(String.valueOf(randomMessage));
            }, 0, 10, TimeUnit.MILLISECONDS);
        }

        public static void stopSending() {
            executor.shutdown();
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.util.ArrayList;
    import java.util.Date;
    import java.util.List;

    public class Block {

        private final String nameOfMiner;
        private final int id;
        private final long timeStamp;
        private final long magicNumber;
        private final String prevHash;
        private final String hash;
        private final List<String> data;
        private final int generationTime;
        private final String messageAboutNumber;

        public Block(String nameOfMiner, int id, long magicNumber, String prevHash, String hash, List<String> data, int generationTime, String messageAboutNumber) {
            this.nameOfMiner = nameOfMiner;
            this.id = id;
            this.timeStamp = new Date().getTime();
            this.magicNumber = magicNumber;
            this.prevHash = prevHash;
            this.hash = hash;
            this.data = new ArrayList<>(data);
            this.generationTime = generationTime;
            this.messageAboutNumber = messageAboutNumber;
        }

        public String getHash() {
            return hash;
        }

        @Override
        public String toString() {
            String str = String.format("Block:\n" +
                    "Created by miner # %s\n" +
                    "Id: %d\n" +
                    "Timestamp: %d\n" +
                    "Magic number: %d\n" +
                    "Hash of the previous block: \n" +
                    "%s\n" +
                    "Hash of the block: \n" +
                    "%s\n",
                    nameOfMiner,
                    id,
                    timeStamp,
                    magicNumber,
                    prevHash,
                    hash);

            if (data.isEmpty()) {
                str += "Block data: no messages\n";
            } else {
                str += "Block data:\n";
                for (String message :
                        data) {
                    str += message + "\n";
                }
            }

            str += String.format("Block was generating for %d seconds\n" +
                            "%s",
                    generationTime,
                    messageAboutNumber);

            return str;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5417#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 11 Mar 2023 07:17:44 UTC
record: 5
